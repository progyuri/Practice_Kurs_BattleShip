#pragma once
#include <iostream>
#include <windows.h>
#include <vector> //подключаем библиотеку для работы с	vector

using namespace std;

HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //Дескриптор активного окна

//клавиши
enum KEY { Up = 72, Left = 75, Right = 77, Down = 80, Enter = 13, Esc = 27, BackSpace = 8, Space=32, Q = 113};

// Цвета которыми можно окрашивать: цвет текста; цвет заливки текста
enum Color { Black, Blue, Green, Cyan, Red, Magenta, Brown, LightGray, DarkGray, LightBlue, LightGreen, LightCyan, LightRed, LightMagenta, Yellow, White };

//список вариантов реплик которые могут вывестись во время игры
enum Replic { Comp_think, Comp_move,Comp_missed,Comp_hit_target, Comp_ship_explosion, Comp_win,you_move, you_missed, you_hit,you_win,you_hit_move,you_ship_explosion};

const char variant[12][100] = { "КОМПЬЮТЕР ДУМАЕТ КУДА УДАРИТЬ...",
								"ХОД КОМПЬЮТЕРА",
								"КОМПЬЮТЕР ПРОМАЗАЛ!",
								"КОМПЬЮТЕР ПОПАЛ!",
								"КОМПЬЮТЕР ПОТОПИЛ ТВОЙ КОРАБЛЬ!",
								"КОМПЬЮТЕР ПОБЕДИЛ... НЕ ГРУСТИ...",
								"ТВОЙ ХОД." ,
								"ТЫ ПРОМАЗАЛ...",
								"ТЫ ПОПАЛ!",
								"ТЫ ПОБЕДИЛ, ПОЗДРАВЛЯЮ!",
								"ТЫ ПОПАЛ, ХОДИ СНОВА!",
								"ЮХУ, ТЫ УНИЧТОЖИЛ ВРАЖЕСКИЙ КОРАБЛИК!"
							   };


const unsigned int numItem = 4;  // количество пунктов в меню
const unsigned int numSubItem = 2; // количество пунктов в подменю

enum Menu { Start, OptionsShipRelated, Tournament, EXIT};
enum MenuSub { Auto, Manual};

//Названия пунктов основного меню
char MenuItem[numItem][100] = { "НАЧАТЬ ИГРУ","РАССТАНОВКА КОРАБЛЕЙ","ПРОСМОТР РЕЗУЛЬТАТОВ","ВЫХОД"};
//Названия пунктов под-меню
char MenuSubItem[numSubItem][100] = { "АВТОМАТИЧЕСКАЯ РАССТАНОВКА","РУЧНАЯ РАССТАНОВКА" };

struct Ship //структура характеристик кораблика
{
	int deck = { 0 }; //количество палуб
	int live = { 0 }; //количество жизней, первоночально = кол-ву палуб, при попадании уменьшаем на 1 
	bool horizontal = true; //положение (изначально - горизонтальное)
	int x, y; //Позиции кораблика по "x" и "y" (первая палуба), необходима для правильного уничтожения кораблика
};

// Размер поля
int const _size = 10;
// Кол-во кораблей
int const count_ship = 10;
//создаём 10-ть корабликов характеристики которых описаны в структуре
//начинаем с индекса = 1, 0 индекс пропускаем 
//цифра на поле соответсвует номеру корабля в массиве, содержащего всю информацию о корабле 
Ship* ships = new Ship[count_ship + 1];
//создаём 10-ть корабликов для компьютера характеристики которых описаны в структуре
Ship* comp_ships = new Ship[count_ship+1];

int ship_pos[_size + 2][_size * 2 + 4] = { 0 }; //двумерный массив поля с расставленными кораблями (свои):
int comp_ship_pos[_size + 2][_size * 2 + 4] = { 0 }; //двумерный массив поля с расставленными кораблями (компьютера):
/*
-3 - место где был снаряд и находился кораблик
-2 - место куда попал снаряд но где ничего не было
-1 - позиции возле корабликов (куда нельзя ставить)
0 - свободные места (куда можно ставить)
1 : 1-но палубный кораблик (1-ый)
2 : 1-о палубный кораблик (2-ой)
3 : 1-о палубный кораблик (3-ий)
4 : 1-о палубный кораблик (4-ый)
5 : 2-х палубный кораблик (1-ый)
6 : 2-х палубный кораблик (2-ой)
7 : 2-х палубный кораблик (3-ий)
8 : 3-х палубный кораблик (1-ый)
9 : 3-х палубный кораблик (2-ой)
10 : 4-х палубный кораблик (первый и единственный)
*/

int mask_pos[_size+2][_size*2+4] = { 0 }; //двумерный массив поля для организации отображения своей стрельбы
/*
-3 : место где был снаряд и находился кораблик/палуба (подбитый)
-2 : место куда попал снаряд но где ничего не было
-1 : позиции возле подбитых корабликов
0 : свободные места, куда еще не стрелял
*/
// аналогично 
//двумерный массив поля для организации отображения стрельбы компьютера
int comp_mask_pos[_size + 2][_size * 2 + 4] = { 0 };


// Начальные координаты для начала отрисовки поля игрока
int xPos_Player, yPos_Player;
// Начальные координаты для начала отрисовки поля компьютера
int xPos_Comp, yPos_Comp;



//вектор направлений для удобного хранения направлений стрельбы для режима AI
vector <int> dirs;

//функция с помощью которой происходит изменение цвета текста
void setColor(Color text, Color background) {
	SetConsoleTextAttribute(hConsole, (WORD)((background << 4) | text)); //установка параметров текста
}

//функция для того чтобы устанавливать позицию курсора в консоли по оси Х и Y
void SetCursor(int x, int y){
	COORD myCoords = { x,y }; //инициализация координат
	SetConsoleCursorPosition(hConsole, myCoords); //Способ перемещения курсора на нужные координаты
}

//функция которая будет показана игроку самая первая
void Avake()
{
	setColor(White, LightBlue); //Устанавливаем цвет текста (белый на голубом)
	//устанавливаем позицию курсора (на свое усмотрение)

	SetCursor(42, 10);
	cout << "МОРСКОЙ БОЙ"; //выводим надпись на экран
}

//void explosion(Ships*, int, int, int&);
//void LoadCharactShips(Ships*);
