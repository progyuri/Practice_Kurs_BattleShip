#pragma once
#include <iostream>
#include <windows.h>
#include <conio.h>
#include "Header.h"



//уничтожение кораблкиков и определение победителя в игре
void explosion(Ships* characteristic, int ship_pos[12][24], int plus, int& end) { 
	int A = 0; //переменная для правильной зарисовки границы вокруг взоравнного кораблика
	int B = 13; //переменная, которая будет помогать указывать на нужный кораблик
	int C = 0; //переменная, которая хранит количество уничтоженных корабликов (если = 10, то игра завершается)
	bool alive = false; //переменная с помощью которой мы будем проверять уничтожение корабликов
	for (size_t n = 13; n > 3; n--) //проверяем все номерки корабликов на наличие их в массиве
	{
		for (size_t i = 1; i < 11; i++) //проганяем массив по строчкам
		{
			for (size_t r = 2; r < 22; r++) //проганяем массив по столбцам
			{
				if (ship_pos[i][r] == n) //проверяем, есть ли в массиве хоть один номерок с корабликом
				{
					alive = true; //в случае успеха - кораблик жив/ранен
					i = 11; //меняем значение чтобы перейти к следуещему номерку
					break; //выходим из цикла
				}
			}
		}
		if (alive == false) //если номерок найден не был, то говорим, что кораблик которому был присвоен этот номер уничтожен
		{
			characteristic[B - n + plus].alive = false; //говорим что данный кораблик уничтожен
		}
		else //иначе
		{
			alive = false; //меняем данную переменную на "false", чтобы проверить следующий кораблик
		}
	}
	for (size_t i = plus; i < 10 + plus; i++) //запускаем цикл, в котором будем проверять все кораблики одной команды на уничтожение
	{
		if (i == 0 || i == 10) //для 4-х палубных
		{
			A = 0; //меняем значение переменной для правильной отрисовки
		}
		else if (i == 1 || i == 2 || i == 11 || i == 12)  //для 3-х палубных
		{
			A = 1; //меняем значение переменной для правильной отрисовки
		}
		else if (i > 2 && i < 6 || i > 12 && i < 16)  //для 2-х палубных
		{
			A = 2; //меняем значение переменной для правильной отрисовки
		}
		else  //для 1-о палубных
		{
			A = 3; //меняем значение переменной для правильной отрисовки
		}
		if (characteristic[i].alive == false) //если данный кораблик уничтожен
		{
			if (characteristic[i].horizontal == true) //если он имеет горизонтальное положение
			{
				for (size_t q = 0; q < 3; q++) //выполнеям нижеуказанный код 3 раза так как нам необходимо окупировать кораблик чтобы они не стояли вполтную к друг другу
				{
					for (size_t w = 0; w < characteristic[i].deck * 3 + A; w++) //выполнеям нижеуказанный код нужное количество раз (для каждого отдельно считаем), чтобы "окупировать" уничтоженный кораблик
					{
						ship_pos[characteristic[i].y - 2 + q][characteristic[i].x - 4 + w] = 2; //меняем значение "окупируемых" позиций в двумерном массиве который будем прверять на различные цифорки, на "2" (промах)
					}
				}
				for (size_t g = 0; g < 2 * characteristic[i].deck; g++) //выполнеям нижеуказанный код нужное количество раз (для каждого отдельно считаем), чтобы выделить уничтоженный кораблик
				{
					ship_pos[characteristic[i].y - 1][characteristic[i].x - 2 + g] = 3; //меняем значение "окупируемых" позиций в двумерном массиве который будем прверять на различные цифорки, на "3" (поподание)
				}
			}
			else if (characteristic[i].horizontal == false)  //если он имеет вертикальное положение
			{
				for (size_t q = 0; q < characteristic[i].deck + 2; q++) //выполнеям нижеуказанный код 3 раза так как нам необходимо окупировать кораблик чтобы они не стояли вполтную к друг другу
				{
					for (int w = -4; w < 2; w++)  //выполнеям нижеуказанный код нужное количество раз (для каждого отдельно считаем), чтобы "окупировать" уничтоженный кораблик
					{
						ship_pos[characteristic[i].y - 2 + q][characteristic[i].x + w] = 2; //меняем значение "окупируемых" позиций в двумерном массиве который будем прверять на различные цифорки, на "2" (промах)
					}
				}
				for (int g = 0; g < characteristic[i].deck; g++) //выполнеям нижеуказанный код нужное количество раз (для каждого отдельно считаем), чтобы выделить уничтоженный кораблик
				{
					for (int n = -2; n < 0; n++) //выполняем нижеуказаныый код 2 раза так как нам нужно поменять значения в массиве для 2-ух клеточек (одной палубы)
					{
						ship_pos[characteristic[i].y - 1 + g][characteristic[i].x + n] = 3; //меняем значение "окупируемых" позиций в двумерном массиве который будем прверять на различные цифорки, на "3" (поподание)
					}
				}
			}
			C++; // увеличиваем значение счётчика уничтоженных корабликов на 1
		}
	}
	if (C == 10 && plus == 0) //если все наши кораблики уничтожены
	{
		end = 1; //завершаем игру (поражение)
	}
	else if (C == 10 && plus == 10) //если все кораблики врага уничтожены
	{
		end = 2; //завершаем игру (победа)
	}
	else //иначе
	{
		C = 0; //онулируем счетчик уничтоженных корабликов
	}
}
